{
  "version": 3,
  "sources": ["../../@influxdata/influxdb-client/src/results/chunkCombiner.ts", "../../@influxdata/influxdb-client/src/results/chunksToLines.ts", "../../@influxdata/influxdb-client/src/results/chunksToLinesIterable.ts", "../../@influxdata/influxdb-client/src/results/LineSplitter.ts", "../../@influxdata/influxdb-client/src/results/FluxTableColumn.ts", "../../@influxdata/influxdb-client/src/errors.ts", "../../@influxdata/influxdb-client/src/results/FluxTableMetaData.ts", "../../@influxdata/influxdb-client/src/results/linesToTables.ts", "../../@influxdata/influxdb-client/src/results/linesToRowsIterable.ts", "../../@influxdata/influxdb-client/src/results/stringToLines.ts", "../../@influxdata/influxdb-client/src/observable/symbol.ts", "../../@influxdata/influxdb-client/src/results/ObservableQuery.ts", "../../@influxdata/influxdb-client/src/options.ts", "../../@influxdata/influxdb-client/src/util/escape.ts", "../../@influxdata/influxdb-client/src/util/currentTime.ts", "../../@influxdata/influxdb-client/src/util/logger.ts", "../../@influxdata/influxdb-client/src/query/flux.ts", "../../@influxdata/influxdb-client/src/Point.ts", "../../@influxdata/influxdb-client/src/impl/retryStrategy.ts", "../../@influxdata/influxdb-client/src/impl/RetryBuffer.ts", "../../@influxdata/influxdb-client/src/util/utf8Length.ts", "../../@influxdata/influxdb-client/src/impl/WriteApiImpl.ts", "../../@influxdata/influxdb-client/src/impl/completeCommunicationObserver.ts", "../../@influxdata/influxdb-client/src/impl/browser/FetchTransport.ts", "../../@influxdata/influxdb-client/src/impl/QueryApiImpl.ts", "../../@influxdata/influxdb-client/src/results/AnnotatedCSVResponseImpl.ts", "../../@influxdata/influxdb-client/src/InfluxDB.ts"],
  "sourcesContent": ["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare class TextDecoder {\n  constructor(encoding: string)\n  decode(chunk: Uint8Array): string\n}\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n", "import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunkCombiner - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n  let paused = false\n  let resumeChunks: (() => void) | undefined\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      // inspect the whole remaining data upon empty chunk\n      // empty chunk signalizes to restart of receiving\n      index = chunk.length === 0 ? 0 : (previous as Uint8Array).length\n      chunk = chunks.concat(previous, chunk)\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          paused = target.next(chunks.toUtf8String(chunk, start, end)) === false\n          start = index + 1\n          if (paused) {\n            break\n          }\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < chunk.length) {\n      previous = chunks.copy(chunk, start, chunk.length)\n    } else {\n      previous = undefined\n    }\n    if (paused) {\n      if (target.useResume) {\n        target.useResume(() => {\n          paused = false\n          bufferReceived(new Uint8Array(0))\n        })\n        return\n      }\n      retVal.error(new Error('Unable to pause, useResume is not configured!'))\n      paused = false // consume remaining data\n    }\n    if (resumeChunks) {\n      resumeChunks()\n      resumeChunks = undefined\n    }\n  }\n\n  const retVal: CommunicationObserver<Uint8Array> = {\n    next(chunk: Uint8Array): boolean {\n      if (!finished) {\n        try {\n          bufferReceived(chunk)\n          return !paused\n        } catch (e) {\n          this.error(e as Error)\n        }\n      }\n      return true\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n  }\n  if (target.useCancellable) {\n    retVal.useCancellable = (cancellable: Cancellable) => {\n      target.useCancellable &&\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            retVal.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n    }\n  }\n  if (target.useResume) {\n    retVal.useResume = (x: () => void) => {\n      resumeChunks = x\n    }\n  }\n\n  return retVal\n}\n", "import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\n\n/**\n * ChunksToLinesIterable is a transformation that accepts\n * an iterable of Uint8Array instances and returns iterable of lines.\n * @param source - iterable of transport buffers\n * @param chunkCombiner - chunk combiner\n * @returns iterable of lines\n */\nexport async function* chunksToLinesIterable(\n  source: AsyncIterable<Uint8Array>,\n  chunkCombiner?: ChunkCombiner\n): AsyncIterableIterator<string> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let quoted = false\n\n  for await (let chunk of source) {\n    let index: number\n    let start = 0\n    if (previous) {\n      index = previous.length\n      chunk = chunks.concat(previous, chunk)\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          yield chunks.toUtf8String(chunk, start, end)\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < chunk.length) {\n      previous = chunks.copy(chunk, start, chunk.length)\n    } else {\n      previous = undefined\n    }\n  }\n  if (previous) {\n    yield chunks.toUtf8String(previous, 0, previous.length)\n  }\n}\n", "/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n", "/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/latest/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * FluxTableColumn describes {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n\n  /**\n   * Get returns a JavaScript object of this column in the supplied result row, using default deserializers.\n   * @param row - a data row\n   * @returns column value\n   */\n  get: (row: string[]) => any\n}\n\nconst identity = (x: string): any => x\n\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/latest/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => (x === '' ? null : x === 'true'),\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n  public get(row: string[]): any {\n    let val = row[this.index]\n    if ((val === '' || val === undefined) && this.defaultValue) {\n      val = this.defaultValue\n    }\n    return (typeSerializers[this.dataType] ?? identity)(val)\n  }\n}\nexport const UNKNOWN_COLUMN: FluxTableColumn = Object.freeze({\n  label: '',\n  dataType: '',\n  group: false,\n  defaultValue: '',\n  index: Number.MAX_SAFE_INTEGER,\n  get: () => undefined,\n})\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n", "import {HttpHeaders} from './results'\n\n/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  public headers?: HttpHeaders | undefined\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string,\n    headers?: HttpHeaders | undefined\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n\n    this.headers = headers\n\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n", "import {\n  FluxTableColumn,\n  UNKNOWN_COLUMN,\n  typeSerializers,\n} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @param errorOnMissingColumn - throw error on missing column (by default), return UNKNOWN_COLUMN when false\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string, errorOnMissingColumn?: boolean): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied row with the help of column descriptors.\n   * @param row - a row with data for each column\n   */\n  toObject(row: string[]): {[key: string]: any}\n\n  /**\n   * Gets column values out of the supplied row.\n   * @param row - a row with data for each column\n   * @param column - column name\n   * @returns column value, undefined for unknown column\n   */\n  get(row: string[], column: string): any\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string, errorOnMissingColumn = true): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    if (errorOnMissingColumn) {\n      throw new IllegalArgumentError(`Column ${label} not found!`)\n    }\n    return UNKNOWN_COLUMN\n  }\n  toObject(row: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < row.length; i++) {\n      const column = this.columns[i]\n      acc[column.label] = column.get(row)\n    }\n    return acc\n  }\n  get(row: string[], column: string): any {\n    return this.column(column, false).get(row)\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n", "import {CommunicationObserver} from './CommunicationObserver'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * LinesToTables creates a transformation that accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  const retVal: CommunicationObserver<string> = {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void | boolean {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          return consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n      return true\n    },\n    complete(): void {\n      consumer.complete()\n    },\n  }\n  if (consumer.useCancellable) {\n    retVal.useCancellable = consumer.useCancellable.bind(consumer)\n  }\n  if (consumer.useResume) {\n    retVal.useResume = consumer.useResume.bind(consumer)\n  }\n  return retVal\n}\n", "import {LineSplitter} from './LineSplitter'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {\n  FluxTableMetaData,\n  createFluxTableMetaData,\n  Row,\n} from './FluxTableMetaData'\n\n/**\n * LinesToRowsIterable is a transformation that accepts\n * an iterable of flux annotated CSV lines and returns\n * an iterable of rows (row values and table metadata).\n */\nexport async function* linesToRowsIterable(\n  source: AsyncIterable<string>\n): AsyncIterableIterator<Row> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData | undefined = undefined\n  for await (const line of source) {\n    if (line === '') {\n      expectMeta = true\n      columns = undefined\n    } else {\n      const values = splitter.splitLine(line)\n      const size = splitter.lastSplitLength\n      if (expectMeta) {\n        // create columns\n        if (!columns) {\n          columns = new Array(size)\n          for (let i = 0; i < size; i++) {\n            columns[i] = newFluxTableColumn()\n          }\n        }\n        if (!values[0].startsWith('#')) {\n          // fill in column names\n          if (values[0] === '') {\n            firstColumnIndex = 1\n            columns = columns.slice(1)\n          } else {\n            firstColumnIndex = 0\n          }\n          for (let i = firstColumnIndex; i < size; i++) {\n            columns[i - firstColumnIndex].label = values[i]\n          }\n          lastMeta = createFluxTableMetaData(columns)\n          expectMeta = false\n        } else if (values[0] === '#datatype') {\n          for (let i = 1; i < size; i++) {\n            columns[i].dataType = values[i] as ColumnType\n          }\n        } else if (values[0] === '#default') {\n          for (let i = 1; i < size; i++) {\n            columns[i].defaultValue = values[i]\n          }\n        } else if (values[0] === '#group') {\n          for (let i = 1; i < size; i++) {\n            columns[i].group = values[i][0] === 't'\n          }\n        }\n      } else {\n        yield {\n          values: values.slice(firstColumnIndex, size),\n          tableMeta:\n            lastMeta as unknown as FluxTableMetaData /* never undefined */,\n        }\n      }\n    }\n  }\n}\n", "import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n", "/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n", "import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: (value) => {\n          observer.next(value)\n        },\n        error: (e) => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: (c) => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n", "import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n  /**\n   * Default HTTP headers to send with every request.\n   */\n  headers?: Record<string, string>\n  /**\n   * Full HTTP web proxy URL including schema, for example http://your-proxy:8080.\n   */\n  proxyUrl?: string\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempt - count of already failed attempts to write the lines (1 ... maxRetries+1)\n   * @param expires - expiration time for the lines to be retried in millis since epoch\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempt: number,\n    expires: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /**\n   * WriteRetrySkipped is informed about lines that were removed from the retry buffer\n   * to keep the size of the retry buffer under the configured limit (maxBufferLines).\n   * @param entry - lines that were skipped\n   */\n  writeRetrySkipped(entry: {lines: Array<string>; expires: number}): void\n\n  /** max count of retries after the first write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records/lines to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n  /** max size of a batch in bytes */\n  maxBatchBytes: number\n  /** InfluxDB Enterprise write consistency as explained in https://docs.influxdata.com/enterprise_influxdb/v1.9/concepts/clustering/#write-consistency */\n  consistency?: 'any' | 'one' | 'quorum' | 'all'\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  maxBatchBytes: 50_000_000, // default max batch size in the cloud\n  flushInterval: 60000,\n  writeFailed: function () {},\n  writeSuccess: function () {},\n  writeRetrySkipped: function () {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/latest/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n", "function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function (value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n", "declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.BUILD_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.BUILD_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.BUILD_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts Point's timestamp to a string.\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n", "/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n", "/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/latest/spec/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = Number(value)\n  if (!isFinite(val)) {\n    if (typeof value === 'number') {\n      return `float(v: \"${val}\")`\n    }\n    throw new Error(`not a flux float: ${value}`)\n  }\n  // try to return a flux float literal if possible\n  // https://docs.influxdata.com/flux/latest/data-types/basic/float/#float-syntax\n  const strVal = val.toString()\n  let hasDot = false\n  for (const c of strVal) {\n    if ((c >= '0' && c <= '9') || c == '-') continue\n    if (c === '.') {\n      hasDot = true\n      continue\n    }\n    return `float(v: \"${strVal}\")`\n  }\n  return hasDot ? strVal : strVal + '.0'\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Sanitizes integer value to avoid injections.\n * @param value - InfluxDB integer literal\n * @returns sanitized integer value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeInteger(value: any): string {\n  // https://docs.influxdata.com/flux/latest/data-types/basic/int/\n  // Min value: -9223372036854775808\n  // Max value: 9223372036854775807\n  // \"9223372036854775807\".length === 19\n  const strVal = String(value)\n  const negative = strVal.startsWith('-')\n  const val = negative ? strVal.substring(1) : strVal\n  if (val.length === 0 || val.length > 19) {\n    throw new Error(`not a flux integer: ${strVal}`)\n  }\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${strVal}`)\n  }\n  if (val.length === 19) {\n    if (negative && val > '9223372036854775808') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n    if (!negative && val > '9223372036854775807') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n  }\n  return strVal\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeInteger(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  if (value instanceof RegExp) {\n    return value.toString()\n  }\n  return new RegExp(value).toString()\n}\n\n/**\n * Creates flux regexp literal out of a regular expression. See\n * https://docs.influxdata.com/flux/latest/data-types/basic/regexp/#regular-expression-syntax\n * for details.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if a regexp can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    if (Number.isSafeInteger(value)) {\n      return sanitizeInteger(value)\n    }\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  } else if (typeof value === 'bigint') {\n    return `${value}.0`\n  }\n  // use toString value for unrecognized object, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n", "import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n", "import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n", "import {Log} from '../util/logger'\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  retryTime: number\n  expires: number\n  next?: RetryItem\n}\n\ntype FindShrinkCandidateResult = [found: RetryItem, parent?: RetryItem]\n\nfunction findShrinkCandidate(first: RetryItem): FindShrinkCandidateResult {\n  let parent = undefined\n  let found = first\n  let currentParent = first\n  while (currentParent.next) {\n    if (currentParent.next.expires < found.expires) {\n      parent = currentParent\n      found = currentParent.next\n    }\n    currentParent = currentParent.next\n  }\n  return [found, parent]\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  size = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>,\n    private onShrink: (entry: {\n      lines: string[]\n      retryCount: number\n      expires: number\n    }) => void = () => undefined\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      retryTime = expires\n    }\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        // remove \"oldest\" item\n        const [found, parent] = findShrinkCandidate(this.first)\n        this.size -= found.lines.length\n        if (parent) {\n          parent.next = found.next\n        } else {\n          this.first = found.next\n          if (this.first) {\n            this.scheduleRetry(this.first.retryTime - Date.now())\n          }\n        }\n        found.next = undefined\n        this.onShrink(found)\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${\n          origSize - this.size\n        } oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines.`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      retryTime,\n      expires,\n    }\n    // insert sorted according to retryTime\n    let current: RetryItem | undefined = this.first\n    let parent = undefined\n    for (;;) {\n      if (!current || current.retryTime > retryTime) {\n        toAdd.next = current\n        if (parent) {\n          parent.next = toAdd\n        } else {\n          this.first = toAdd\n          this.scheduleRetry(retryTime - Date.now())\n        }\n        break\n      }\n      parent = current\n      current = current.next\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n    }\n    this._timeoutHandle = setTimeout(\n      () => {\n        const toRetry = this.removeLines()\n        if (toRetry) {\n          this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n            .catch(() => {\n              /* error is already logged, it must be caught */\n            })\n            .finally(() => {\n              // schedule next retry execution\n              if (this.first) {\n                this.scheduleRetry(this.first.retryTime - Date.now())\n              }\n            })\n        } else {\n          this._timeoutHandle = undefined\n        }\n      },\n      Math.max(delay, 0)\n    )\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n", "/**\n * Utf8Length returns an expected length of a string when UTF-8 encoded.\n * @param s - input string\n * @returns expected count of bytes\n */\nexport default function utf8Length(s: string): number {\n  let retVal = s.length\n  // extends the size with code points (https://en.wikipedia.org/wiki/UTF-8#Encoding)\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i)\n    /* istanbul ignore else - JS does not count with 4-bytes UNICODE characters at the moment */\n    if (code < 0x80) {\n      continue\n    } else if (code >= 0x80 && code <= 0x7ff) {\n      retVal++\n    } else if (code >= 0x800 && code <= 0xffff) {\n      if (code >= 0xd800 && code <= 0xdfff) {\n        // node.js represents unicode characters above 0xffff by two UTF-16 surrogate halves\n        // see https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n        retVal++\n      } else {\n        retVal += 2\n      }\n    } else {\n      // never happens in node.js 14, the situation can vary in the futures or in deno/browsers\n      retVal += 3\n    }\n  }\n  return retVal\n}\n", "import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\nimport utf8Length from '../util/utf8Length'\n\nclass WriteBuffer {\n  length = 0\n  bytes = -1\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private maxBatchBytes: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    const size = utf8Length(record)\n    if (this.length === 0) {\n      this.scheduleSend()\n    } else if (this.bytes + size + 1 >= this.maxBatchBytes) {\n      // the new size already exceeds maxBatchBytes, send it\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n    this.lines[this.length] = record\n    this.length++\n    this.bytes += size + 1\n    if (\n      this.length >= this.maxChunkRecords ||\n      this.bytes >= this.maxBatchBytes\n    ) {\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    this.bytes = -1 // lines are joined with \\n\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  public path: string\n\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.path = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    if (writeOptions?.consistency) {\n      this.path += `&consistency=${encodeURIComponent(\n        writeOptions.consistency\n      )}`\n    }\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries\n              ).catch((_e) => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      this.writeOptions.maxBatchBytes,\n      (lines) => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch,\n      this.writeOptions.writeRetrySkipped\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    retryAttempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 1 - retryAttempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        const onRetry = self.writeOptions.writeFailed.call(\n          self,\n          error,\n          lines,\n          failedAttempts,\n          expires\n        )\n        if (onRetry) {\n          return onRetry\n        }\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        let headers: Headers | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n            headers = _headers\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts,\n              expires\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            // ignore informational message about the state of InfluxDB\n            // enterprise cluster, if present\n            if (\n              error instanceof HttpError &&\n              error.json &&\n              typeof error.json.error === 'string' &&\n              error.json.error.includes('hinted handoff queue not empty')\n            ) {\n              Log.warn('Write to InfluxDB returns: ' + error.json.error)\n              responseStatusCode = 204\n              callbacks.complete()\n              return\n            }\n            // retry if possible\n            if (\n              !self.closed &&\n              retryAttempts > 0 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                retryAttempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // InfluxDB v3 returns 201 for partial success\n            // older implementations of transport do not report status code\n            if (\n              responseStatusCode == 204 ||\n              responseStatusCode == 201 ||\n              responseStatusCode == undefined\n            ) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0',\n                undefined,\n                undefined,\n                headers\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.path,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n", "import {CommunicationObserver, Headers} from '../results'\n\ntype CompleteObserver = Omit<\n  Required<CommunicationObserver<any>>,\n  'useCancellable' | 'useResume'\n> &\n  Pick<CommunicationObserver<any>, 'useResume' | 'useCancellable'>\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): CompleteObserver {\n  let state = 0\n  const retVal: CompleteObserver = {\n    next: (data: any): void | boolean => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        return callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  if (callbacks.useCancellable) {\n    retVal.useCancellable = callbacks.useCancellable.bind(callbacks)\n  }\n  if (callbacks.useResume) {\n    retVal.useResume = callbacks.useResume.bind(callbacks)\n  }\n  return retVal\n}\n", "import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {AbortError, HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Log} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n      ...connectionOptions.headers,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    let pausePromise: Promise<void> | undefined\n    const resumeQuickly = () => {}\n    let resume = resumeQuickly\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...options, signal}\n      }\n      // resume data reading so that it can exit on abort signal\n      signal.addEventListener('abort', () => {\n        resume()\n      })\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async (response) => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        await this.throwOnErrorResponse(response)\n        if (response.body) {\n          const reader = response.body.getReader()\n          let chunk: ReadableStreamReadResult<Uint8Array>\n          do {\n            if (pausePromise) {\n              await pausePromise\n            }\n            if (cancelled) {\n              break\n            }\n            chunk = await reader.read()\n            if (observer.next(chunk.value) === false) {\n              const useResume = observer.useResume\n              if (!useResume) {\n                const msg = 'Unable to pause, useResume is not configured!'\n                await reader.cancel(msg)\n                return Promise.reject(new Error(msg))\n              }\n              pausePromise = new Promise((resolve) => {\n                resume = () => {\n                  resolve()\n                  pausePromise = undefined\n                  resume = resumeQuickly\n                }\n                useResume(resume)\n              })\n            }\n          } while (!chunk.done)\n        } else if (response.arrayBuffer) {\n          const buffer = await response.arrayBuffer()\n          observer.next(new Uint8Array(buffer))\n        } else {\n          const text = await response.text()\n          observer.next(new TextEncoder().encode(text))\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  private async throwOnErrorResponse(response: Response): Promise<void> {\n    if (response.status >= 300) {\n      let text = ''\n      try {\n        text = await response.text()\n        if (!text) {\n          const headerError = response.headers.get('x-influxdb-error')\n          if (headerError) {\n            text = headerError\n          }\n        }\n      } catch (e) {\n        Log.warn('Unable to receive error body', e)\n\n        throw new HttpError(\n          response.status,\n          response.statusText,\n          undefined,\n          response.headers.get('retry-after'),\n          response.headers.get('content-type'),\n          undefined,\n          getResponseHeaders(response)\n        )\n      }\n      throw new HttpError(\n        response.status,\n        response.statusText,\n        text,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type'),\n        undefined,\n        getResponseHeaders(response)\n      )\n    }\n  }\n\n  async *iterate(\n    path: string,\n    body: string,\n    options: SendOptions\n  ): AsyncIterableIterator<Uint8Array> {\n    const response = await this.fetch(path, body, options)\n    await this.throwOnErrorResponse(response)\n    if (response.body) {\n      const reader = response.body.getReader()\n      for (;;) {\n        const {value, done} = await reader.read()\n        if (done) {\n          break\n        }\n        if (options.signal?.aborted) {\n          await response.body.cancel()\n          throw new AbortError()\n        }\n        yield value\n      }\n    } else if (response.arrayBuffer) {\n      const buffer = await response.arrayBuffer()\n      yield new Uint8Array(buffer)\n    } else {\n      const text = await response.text()\n      yield new TextEncoder().encode(text)\n    }\n  }\n\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    await this.throwOnErrorResponse(response)\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n            ? body\n            : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as const,\n      // override with custom transport options\n      ...this.connectionOptions.transportOptions,\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function () {}\n}\n", "import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n  IterableResultExecutor,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (\n      executor: APIExecutor,\n      iterableResultExecutor: IterableResultExecutor\n    ) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    const {org, type, gzip, headers} = this.options\n    const path = `/api/v2/query?org=${encodeURIComponent(org)}`\n    const body = JSON.stringify(\n      this.decorateRequest({\n        query: query.toString(),\n        dialect: DEFAULT_dialect,\n        type,\n      })\n    )\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json; encoding=utf-8',\n        'accept-encoding': gzip ? 'gzip' : 'identity',\n        ...headers,\n      },\n    }\n    return this.createCSVResponse(\n      (consumer) => this.transport.send(path, body, options, consumer),\n      () => this.transport.iterate(path, body, options)\n    )\n  }\n\n  iterateLines(query: string | ParameterizedQuery): AsyncIterable<string> {\n    return this.response(query).iterateLines()\n  }\n  iterateRows(query: string | ParameterizedQuery): AsyncIterable<Row> {\n    return this.response(query).iterateRows()\n  }\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/latest/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n", "import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n  chunksToLinesIterable,\n  linesToRowsIterable,\n} from '../results'\nimport {Observable} from '../observable'\nimport {\n  AnnotatedCSVResponse,\n  IterableResultExecutor,\n} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private iterableResultExecutor: IterableResultExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  iterateLines(): AsyncIterable<string> {\n    return chunksToLinesIterable(this.iterableResultExecutor())\n  }\n  iterateRows(): AsyncIterable<Row> {\n    return linesToRowsIterable(\n      chunksToLinesIterable(this.iterableResultExecutor())\n    )\n  }\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, (observer) =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, (observer) => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n", "import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/browser/FetchTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {\n  AnnotatedCSVResponse,\n  APIExecutor,\n  IterableResultExecutor,\n} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (\n    executor: APIExecutor,\n    iterableResultExecutor: IterableResultExecutor\n  ) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = Object.assign({}, options)\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    delete this._options.token\n    this.processCSVResponse = (\n      executor: APIExecutor,\n      iterableResultExecutor: IterableResultExecutor\n    ): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(\n        executor,\n        iterableResultExecutor,\n        this.transport.chunkCombiner\n      )\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Use {@link WriteOptions} to customize retry strategy options, data chunking\n   * and flushing options. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.mjs | write example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.mjs | writeAdvanced example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.mjs | queryWithParams.mjs example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n"],
  "mappings": "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",
  "names": ["createTextDecoderCombiner", "decoder", "first", "second", "retVal", "chunk", "start", "end", "chunksToLines", "target", "chunkCombiner", "chunks", "previous", "finished", "quoted", "paused", "resumeChunks", "bufferReceived", "index", "c", "e", "error", "cancellable", "x", "chunksToLinesIterable", "source", "LineSplitter", "val", "line", "quoteCount", "startIndex", "values", "count", "i", "identity", "typeSerializers", "FluxTableColumnImpl", "row", "_a", "UNKNOWN_COLUMN", "newFluxTableColumn", "createFluxTableColumn", "object", "_b", "retriableStatusCodes", "isStatusCodeRetriable", "statusCode", "IllegalArgumentError", "_IllegalArgumentError", "message", "HttpError", "_HttpError", "statusMessage", "body", "retryAfter", "contentType", "headers", "RETRY_CODES", "canRetryHttpCall", "getRetryDelay", "retryJitter", "RequestTimedOutError", "_RequestTimedOutError", "AbortError", "_AbortError", "serializeDateTimeAsDate", "serializeDateTimeAsNumber", "serializeDateTimeAsString", "FluxTableMetaDataImpl", "columns", "col", "label", "errorOnMissingColumn", "acc", "column", "createFluxTableMetaData", "linesToTables", "consumer", "splitter", "expectMeta", "firstColumnIndex", "lastMeta", "size", "linesToRowsIterable", "stringToLines", "symbolObservable", "QuerySubscription", "observer", "executor", "value", "noop", "completeObserver", "next", "complete", "ObservableQuery", "decorator", "observerOrNext", "DEFAULT_ConnectionOptions", "DEFAULT_RetryDelayStrategyOptions", "DEFAULT_WriteOptions", "createEscaper", "characters", "replacements", "from", "found", "createQuotedEscaper", "escaper", "escape", "zeroPadding", "useProcessHrtime", "use", "lastMillis", "stepsInMillis", "nanos", "millis", "micros", "seconds", "currentTime", "dateToProtocolTimestamp", "d", "convertTimeToNanos", "consoleLogger", "provider", "Log", "setLogger", "logger", "FLUX_VALUE", "FluxParameter", "fluxValue", "isFluxParameterLike", "sanitizeString", "prepareRetVal", "fluxString", "sanitizeFloat", "strVal", "hasDot", "fluxFloat", "sanitizeInteger", "negative", "fluxInteger", "sanitizeDateTime", "fluxDateTime", "fluxDuration", "sanitizeRegExp", "fluxRegExp", "fluxBool", "fluxExpression", "toFluxValue", "flux", "strings", "parts", "partIndex", "text", "sanitized", "Point", "measurementName", "name", "code", "settings", "fieldsLine", "tagsLine", "tags", "time", "RetryStrategyImpl", "options", "failedAttempts", "delay", "nextDelay", "createRetryDelayStrategy", "findShrinkCandidate", "parent", "currentParent", "RetryBuffer", "maxLines", "retryLines", "onShrink", "lines", "retryCount", "expires", "retryTime", "origSize", "newSize", "toAdd", "current", "toRetry", "utf8Length", "s", "WriteBuffer", "maxChunkRecords", "maxBatchBytes", "flushFn", "scheduleSend", "record", "_e", "WriteApiImpl", "transport", "org", "bucket", "precision", "writeOptions", "scheduleNextSend", "retryAttempts", "self", "onRetry", "resolve", "reject", "responseStatusCode", "callbacks", "_headers", "records", "point", "points", "withRetryBuffer", "remaining", "completeCommunicationObserver", "state", "data", "getResponseHeaders", "response", "key", "FetchTransport", "connectionOptions", "path", "cancelled", "signal", "pausePromise", "resumeQuickly", "resume", "controller", "reader", "useResume", "msg", "buffer", "headerError", "done", "responseStarted", "responseContentType", "responseType", "method", "other", "url", "request", "DEFAULT_dialect", "QueryApiImpl", "_QueryApiImpl", "createCSVResponse", "query", "type", "gzip", "rowMapper", "QueryApiImpl_default", "defaultRowMapping", "tableMeta", "AnnotatedCSVResponseImpl", "iterableResultExecutor", "InfluxDB"]
}
